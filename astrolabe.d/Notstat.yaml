---
type: "ProfileStrategy"
description: "Discover TCP connections by reading /proc/net/tcp filesystem"
name: "Notstat"
#providers: ["ssh", "k8s"]
providers: ["k8s"]
protocol: "TCP"
providerArgs:
    shell_command: |
        # pre-requisites
        # if netstat is installed - let the Netstat profile strategy handle profiling
        command -v netstat >/dev/null && exit
        
        # Function to sample /proc/net/tcp for a specified duration
        # Capturing only the essential information for connection identification
        sample_connections() {
            local duration=${1:-3}  # Duration in seconds to sample, default to 3 seconds
            local output_file=$2
            local start_time=$(date +%s)
            local end_time=$((start_time + duration))
            
            echo "Sampling /proc/net/tcp for ${duration} seconds..."
            
            # Create empty output file
            > "$output_file"
            
            # Sample connections until the duration is reached
            while [ $(date +%s) -lt $end_time ]; do
                # Only grab local address, remote address, and state (columns 2, 3, 4)
                awk 'NR>1 {print $2, $3, $4}' /proc/net/tcp >> "$output_file"
                # Also check tcp6 for IPv4-mapped addresses (common in Docker)
                awk 'NR>1 {print $2, $3, $4}' /proc/net/tcp6 >> "$output_file" 2>/dev/null
            done
        }
        
        # Function to process and format connections
        notstat() {
            local duration=${1:-3}  # Duration in seconds to sample, default to 3 seconds
            local temp_dir=$(mktemp -d)
            local raw_file="$temp_dir/raw_connections"
            local unique_file="$temp_dir/unique_connections"
            
            # Sample connections
            sample_connections "$duration" "$raw_file"
            
            # Get unique connections only
            sort -u "$raw_file" > "$unique_file"
            
            echo "Local_Address Foreign_Address State"
            
            # Process only the unique connections
            while read local rem state; do
                local_ip_hex=$(echo $local | cut -d: -f1)
                local_port_hex=$(echo $local | cut -d: -f2)
                rem_ip_hex=$(echo $rem | cut -d: -f1)
                rem_port_hex=$(echo $rem | cut -d: -f2)
        
                # Check if this is from tcp6 and an IPv4-mapped address
                if [ ${#local_ip_hex} -gt 8 ]; then
                    # This is from tcp6 - check if it's an IPv4-mapped address
                    if [ "${local_ip_hex:0:24}" = "0000000000000000FFFF0000" ]; then
                        # IPv4-mapped address - extract the IPv4 part
                        local_ip_dec=$(printf "%d.%d.%d.%d\n" 0x"${local_ip_hex:30:2}" 0x"${local_ip_hex:28:2}" 0x"${local_ip_hex:26:2}" 0x"${local_ip_hex:24:2}")
                        rem_ip_dec=$(printf "%d.%d.%d.%d\n" 0x"${rem_ip_hex:30:2}" 0x"${rem_ip_hex:28:2}" 0x"${rem_ip_hex:26:2}" 0x"${rem_ip_hex:24:2}")
                    else
                        # Skip true IPv6 addresses
                        continue
                    fi
                else
                    # Convert hex IP to decimal IP
                    local_ip_dec=$(printf "%d.%d.%d.%d\n" 0x"${local_ip_hex:6:2}" 0x"${local_ip_hex:4:2}" 0x"${local_ip_hex:2:2}" 0x"${local_ip_hex:0:2}")
                    rem_ip_dec=$(printf "%d.%d.%d.%d\n" 0x"${rem_ip_hex:6:2}" 0x"${rem_ip_hex:4:2}" 0x"${rem_ip_hex:2:2}" 0x"${rem_ip_hex:0:2}")
                fi
        
                # Convert hex port to decimal port
                local_port_dec=$(printf "%d\n" 0x$local_port_hex)
                rem_port_dec=$(printf "%d\n" 0x$rem_port_hex)
        
                # Decode the connection state
                case "$state" in
                    "01") state_dec="EST" ;;
                    "0A") state_dec="LISTEN" ;;
                    *) state_dec="OTHER" ;;
                esac
        
                echo "$local_ip_dec:$local_port_dec $rem_ip_dec:$rem_port_dec $state_dec"
            done < "$unique_file"
            
            # Clean up temp files
            rm -rf "$temp_dir"
        }
        
        # Run notstat to gather data (adjust duration as needed)
        ALL_CONNECTIONS=$(notstat 3)
        
        # determine listening ports on this instance
        LISTENING_PORTS=$(echo "$ALL_CONNECTIONS" | grep LISTEN | awk '{print $1}' | awk -F: '{print $NF}' | grep '[0-9]' | sort | uniq | paste -sd "|" -)
        
        # Process the data in one go
        echo "$ALL_CONNECTIONS" | 
            # get connections on ports we are interested in
            # awk '$2 ~ /:(3306|9042|9160|11211|5432|6379|80|443)$/ {print}' |
            # filter TCP responses - we only want originating requests
            awk '$1 !~ /:('"$LISTENING_PORTS"')$/ {print $2}' |
            # exclude if self is the dest
            grep -v $(getent hosts $(head -n 1 /proc/sys/kernel/hostname | awk '{print $1}') 2>/dev/null | awk '{print $1}' || echo "127.0.0.1") |
            # only take 1 server per port
            tr ':' ' ' | sort -k2 | uniq | 
            awk 'BEGIN{print "mux address"};$1$2!=uniqid{print $2,$1;uniqid=$1$2}'
childProvider:
    type: "matchPort"
    matches:
        5432: ["aws", "RESOURCE"]   # PostreSQL
        6379: ["aws", "RESOURCE"]   # REDIS
        80: ["k8s", "COMPUTE"]      # w3
        443: ["k8s", "COMPUTE"]     # w3
        8080: ["k8s", "COMPUTE"]    # w3
        8883: ["k8s", "COMPUTE"]    # MQTT
    default: ["k8s", "COMPUTE"]